{"version":3,"sources":["logo.svg","new-todo-form.js","pending-todos-list.js","pending-todos-count.js","completed-todos-list.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewTodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newTodo","addTodo","bind","assertThisInitialized","handleChange","event","setState","preventDefault","target","value","react_default","a","createElement","onSubmit","className","type","placeholder","onChange","id","Component","PendingTodosList","index","updateTodo","todos","map","key","status","task","PendingTodosCount","count","CompletedTodosList","todo","deleteTodo","onClick","App","error","isLoaded","completedTodos","pendingTodos","_this2","fetch","then","res","json","result","filterTodos","_this3","method","headers","Accept","Content-Type","body","JSON","stringify","concat","toConsumableArray","_this4","url","splice","_this5","filter","new_todo_form","pending_todos_count","length","pending_todos_list","completed_todos_list","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2LC2CzBC,2BAzCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,IAEbR,EAAKS,QAAUT,EAAKS,QAAQC,KAAbT,OAAAU,EAAA,EAAAV,CAAAD,IACfA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IANLA,uEASXa,GACJV,KAAKJ,MAAMU,QAAQN,KAAKI,MAAMC,SAC9BL,KAAKW,SAAS,CAACN,QAAS,KACxBK,EAAME,sDAGGF,GACTV,KAAKW,SAAS,CAAEN,QAASK,EAAMG,OAAOC,yCAItC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUlB,KAAKM,SACjBS,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOD,UAAU,wBAAwBE,YAAY,WAC7DP,MAAOd,KAAKI,MAAMC,QAClBiB,SAAUtB,KAAKS,gBAEvBM,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,UAAQM,GAAG,WAAWJ,UAAU,kBAAkBC,KAAK,SAASN,MAAM,UAAtE,eAMZC,EAAAC,EAAAC,cAAA,mBArCUO,cC+BXC,uLA5BEC,GACT1B,KAAKJ,MAAM+B,WAAW3B,KAAKJ,MAAMgC,MAAMF,GAAQA,oCAI1C,IAAA7B,EAAAG,KACC4B,EAAQ5B,KAAKJ,MAAMgC,MAEzB,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIM,GAAG,WAAWJ,UAAU,iBAEvBS,EAAMC,IAAI,SAACf,EAAOY,GAClB,OAAOX,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAmBW,IAAKhB,EAAMS,IAChDR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWN,MAAOA,EAAMiB,OACpCT,SAAUzB,EAAKY,aAAaF,KAAKV,EAAM6B,KAAUZ,EAAMkB,mBApBxDR,aCShBS,mLAPP,OACIlB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,QAAME,UAAU,iBAD5B,eACuEnB,KAAKJ,MAAMsC,cAJ9DV,aCoBjBW,qLAnBAC,EAAMV,GACb1B,KAAKJ,MAAMyC,WAAWD,EAAMV,oCAEvB,IAAA7B,EAAAG,KACC4B,EAAQ5B,KAAKJ,MAAMgC,MACzB,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIM,GAAG,aAAaJ,UAAU,iBACzBS,EAAMC,IAAI,SAACO,EAAMV,GACd,OAAOX,EAAAC,EAAAC,cAAA,MAAIa,IAAKM,EAAKb,IAAKa,EAAKJ,KAAxB,IAA8BjB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,gDAAgDmB,QAASzC,EAAKwC,WAAW9B,KAAKV,EAAMuC,EAAMV,IAC7IX,EAAAC,EAAAC,cAAA,QAAME,UAAU,4CAXXK,aC2JlBe,cAjJb,SAAAA,EAAY3C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACjB1C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,KAAMJ,KACDQ,MAAQ,CACXoC,MAAO,KACPC,UAAU,EACVC,eAAgB,GAChBC,aAAc,GACdtC,QAAS,IAEXR,EAAKS,QAAUT,EAAKS,QAAQC,KAAbT,OAAAU,EAAA,EAAAV,CAAAD,IACfA,EAAK8B,WAAa9B,EAAK8B,WAAWpB,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKwC,WAAaxC,EAAKwC,WAAW9B,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAXDA,mFAcC,IAAA+C,EAAA5C,KAClB6C,MAAM,UACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCL,EAAKjC,SAAS,CACZ8B,UAAU,EACVC,eAAgBE,EAAKM,YAAYD,GAAQ,GACzCN,aAAcC,EAAKM,YAAYD,GAAQ,MAM3C,SAACT,GACCI,EAAKjC,SAAS,CACZ8B,UAAU,EACVD,4CAMFR,GAAM,IAAAmB,EAAAnD,KACZ6C,MAAM,SAAU,CACdO,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnB3B,QAAQ,EACRC,KAAMA,MAGTc,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACC,GACHI,EAAKxC,SAAS,CAACgC,aAAY,GAAAgB,OAAA7D,OAAA8D,EAAA,EAAA9D,CAAMqD,EAAK/C,MAAMuC,cAAjB,CAA+BI,2CAMrDX,EAAMV,GAAO,IAAAmC,EAAA7D,KACtBoC,EAAKL,QAAUK,EAAKL,OACpB,IAAM+B,EAAM,UAAU1B,EAAKb,GAC3BsB,MAAMiB,EAAK,CACTV,OAAQ,MACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUtB,KAEtBU,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACC,GACH,GAAIA,EAAIhB,OAAQ,CACd,IAAMY,EAAekB,EAAKzD,MAAMuC,aAChCA,EAAaoB,OAAOrC,EAAM,GAC1BmC,EAAKlD,SAAS,CAACgC,aAAcA,IAC7BkB,EAAKlD,SAAS,CAAC+B,eAAc,GAAAiB,OAAA7D,OAAA8D,EAAA,EAAA9D,CAAM+D,EAAKzD,MAAMsC,gBAAjB,CAAiCK,UACzD,CACL,IAAML,EAAiBmB,EAAKzD,MAAMsC,eAClCA,EAAeqB,OAAOrC,EAAM,GAC5BmC,EAAKlD,SAAS,CAAC+B,eAAgBA,IAC/BmB,EAAKlD,SAAS,CAACgC,aAAY,GAAAgB,OAAA7D,OAAA8D,EAAA,EAAA9D,CAAM+D,EAAKzD,MAAMuC,cAAjB,CAA+BI,4CAQvDX,EAAMV,GAAO,IAAAsC,EAAAhE,KAChB8D,EAAM,UAAU1B,EAAKb,GAC3BsB,MAAMiB,EAAK,CACTV,OAAQ,SACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,sBAGnBT,KAAK,WACA,IAAMJ,EAAiBsB,EAAK5D,MAAMsC,eAClCA,EAAeqB,OAAOrC,EAAM,GAC5BsC,EAAKrD,SAAS,CAAC+B,eAAgBA,0CAO3Bd,EAAOG,GACjB,OAAOH,EAAMqC,OAAO,SAAC7B,GACnB,OAAIL,EACKK,EAAKL,QAEJK,EAAKL,0CAOjB,OACEhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACiD,EAAD,CAAa5D,QAASN,KAAKM,UAC3BS,EAAAC,EAAAC,cAACkD,EAAD,CAAmBjC,MAAOlC,KAAKI,MAAMuC,aAAayB,SAClDrD,EAAAC,EAAAC,cAACoD,EAAD,CAAkBzC,MAAO5B,KAAKI,MAAMuC,aAAchB,WAAY3B,KAAK2B,eAGvEZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACqD,EAAD,CAAoB1C,MAAO5B,KAAKI,MAAMsC,eAAgBL,WAAYrC,KAAKqC,yBAvIrEkC,IAAM/C,WCGJgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.9d66d0fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nclass NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newTodo: ''\r\n        }\r\n        this.addTodo = this.addTodo.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    addTodo(event) {\r\n        this.props.addTodo(this.state.newTodo);\r\n        this.setState({newTodo: ''});\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ newTodo: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.addTodo}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-xs-8\">\r\n                            <input type=\"text\" className=\"form-control add-todo\" placeholder=\"Add todo\"\r\n                                value={this.state.newTodo}\r\n                                onChange={this.handleChange}></input>\r\n                        </div>\r\n                        <div className=\"col-xs-4\">\r\n                            <button id=\"checkAll\" className=\"btn btn-success\" type=\"submit\" value=\"Submit\"\r\n                            >Add todo</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                <hr></hr>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default NewTodoForm","import React, { Component } from 'react'\r\nclass PendingTodosList extends Component {\r\n    \r\n\r\n    handleChange(index) {        \r\n        this.props.updateTodo(this.props.todos[index], index);\r\n    }\r\n\r\n\r\n    render() {\r\n        const todos = this.props.todos;\r\n        \r\n        return (\r\n            <div>\r\n                <ul id=\"sortable\" className=\"list-unstyled\">\r\n\r\n                    {todos.map((value, index) => {\r\n                     return <li className=\"ui-state-default\" key={value.id}>\r\n                        <div className=\"checkbox\">\r\n                            <label>\r\n                                <input type=\"checkbox\" value={value.status} \r\n                                onChange={this.handleChange.bind(this, index)}/>{value.task}</label>\r\n                        </div>\r\n                    </li>\r\n                    \r\n                })}\r\n\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PendingTodosList","import React, { Component } from 'react'\r\nclass PendingTodosCount extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"todo-footer\">\r\n                <strong><span className=\"count-todos\"></span></strong> Items Left {this.props.count}\r\n               </div>\r\n        )\r\n    }\r\n}\r\nexport default PendingTodosCount","import React, { Component } from 'react'\r\nclass CompletedTodosList extends Component {\r\n    deleteTodo(todo, index) {\r\n        this.props.deleteTodo(todo, index);\r\n    }\r\n    render() {\r\n        const todos = this.props.todos\r\n        return (\r\n            <div>\r\n                <ul id=\"done-items\" className=\"list-unstyled\">\r\n                    {todos.map((todo, index) => {\r\n                        return <li key={todo.id}>{todo.task} <button className=\"remove-item btn btn-default btn-xs pull-right\" onClick={this.deleteTodo.bind(this, todo, index)}>\r\n                            <span className=\"glyphicon glyphicon-remove\"></span></button></li>\r\n                    })}\r\n                    \r\n\r\n                  </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CompletedTodosList","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport NewTodoForm from './new-todo-form';\nimport PendingTodosList from './pending-todos-list';\nimport PendingTodosCount from './pending-todos-count';\nimport CompletedTodosList from './completed-todos-list';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      completedTodos: [],\n      pendingTodos: [],\n      newTodo: ''\n    };\n    this.addTodo = this.addTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('/todos')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            completedTodos: this.filterTodos(result, true),\n            pendingTodos: this.filterTodos(result, false)\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  addTodo(task) {\n    fetch('/todos', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        status: false,\n        task: task\n      })\n    })\n    .then(res => res.json())\n    .then((res) => {\n        this.setState({pendingTodos: [...this.state.pendingTodos, res]}  )\n      }\n    \n    )\n  }\n\n  updateTodo(todo, index) {\n    todo.status = !todo.status;\n    const url = '/todos/'+todo.id;\n    fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(todo)\n    })\n    .then(res => res.json())\n    .then((res) => {\n        if (res.status) {\n          const pendingTodos = this.state.pendingTodos;\n          pendingTodos.splice(index,1);\n          this.setState({pendingTodos: pendingTodos}  );\n          this.setState({completedTodos: [...this.state.completedTodos, res]}  );\n        } else {\n          const completedTodos = this.state.completedTodos;\n          completedTodos.splice(index,1);\n          this.setState({completedTodos: completedTodos}  );\n          this.setState({pendingTodos: [...this.state.pendingTodos, res]}  )\n        }\n        \n      }\n    \n    )\n  }\n\n  deleteTodo(todo, index) {\n    const url = '/todos/'+todo.id;\n    fetch(url, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    .then(() => {\n          const completedTodos = this.state.completedTodos;\n          completedTodos.splice(index,1);\n          this.setState({completedTodos: completedTodos}  );\n        \n      }\n    \n    )\n  }\n\n  filterTodos(todos, status) {\n    return todos.filter((todo) => {\n      if (status) {\n        return todo.status\n      } else  {\n        return !todo.status;\n      }\n       \n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"todolist not-done\">\n                <h1>Todos</h1>\n                <NewTodoForm addTodo={this.addTodo}/>\n                <PendingTodosCount count={this.state.pendingTodos.length}/>\n                <PendingTodosList todos={this.state.pendingTodos} updateTodo={this.updateTodo}/>\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"todolist\">\n                <h1>Already Done</h1>\n                <CompletedTodosList todos={this.state.completedTodos} deleteTodo={this.deleteTodo}/>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}